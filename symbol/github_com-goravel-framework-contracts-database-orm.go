// Code generated by 'yaegi extract github.com/goravel/framework/contracts/database/orm'. DO NOT EDIT.

package symbol

import (
	"context"
	"database/sql"
	"github.com/goravel/framework/contracts/database/orm"
	"reflect"
)

func init() {
	Symbols["github.com/goravel/framework/contracts/database/orm/orm"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DriverMysql":        reflect.ValueOf(orm.DriverMysql),
		"DriverPostgres":     reflect.ValueOf(orm.DriverPostgres),
		"DriverPostgresql":   reflect.ValueOf(orm.DriverPostgresql),
		"DriverSqlite":       reflect.ValueOf(orm.DriverSqlite),
		"DriverSqlserver":    reflect.ValueOf(orm.DriverSqlserver),
		"EventCreated":       reflect.ValueOf(orm.EventCreated),
		"EventCreating":      reflect.ValueOf(orm.EventCreating),
		"EventDeleted":       reflect.ValueOf(orm.EventDeleted),
		"EventDeleting":      reflect.ValueOf(orm.EventDeleting),
		"EventForceDeleted":  reflect.ValueOf(orm.EventForceDeleted),
		"EventForceDeleting": reflect.ValueOf(orm.EventForceDeleting),
		"EventRetrieved":     reflect.ValueOf(orm.EventRetrieved),
		"EventSaved":         reflect.ValueOf(orm.EventSaved),
		"EventSaving":        reflect.ValueOf(orm.EventSaving),
		"EventUpdated":       reflect.ValueOf(orm.EventUpdated),
		"EventUpdating":      reflect.ValueOf(orm.EventUpdating),

		// type definitions
		"Association":      reflect.ValueOf((*orm.Association)(nil)),
		"ConnectionModel":  reflect.ValueOf((*orm.ConnectionModel)(nil)),
		"Cursor":           reflect.ValueOf((*orm.Cursor)(nil)),
		"DispatchesEvents": reflect.ValueOf((*orm.DispatchesEvents)(nil)),
		"Driver":           reflect.ValueOf((*orm.Driver)(nil)),
		"Event":            reflect.ValueOf((*orm.Event)(nil)),
		"EventType":        reflect.ValueOf((*orm.EventType)(nil)),
		"Factory":          reflect.ValueOf((*orm.Factory)(nil)),
		"Observer":         reflect.ValueOf((*orm.Observer)(nil)),
		"Orm":              reflect.ValueOf((*orm.Orm)(nil)),
		"Query":            reflect.ValueOf((*orm.Query)(nil)),
		"Result":           reflect.ValueOf((*orm.Result)(nil)),
		"ToSql":            reflect.ValueOf((*orm.ToSql)(nil)),
		"Transaction":      reflect.ValueOf((*orm.Transaction)(nil)),

		// interface wrapper definitions
		"_Association":      reflect.ValueOf((*_github_com_goravel_framework_contracts_database_orm_Association)(nil)),
		"_ConnectionModel":  reflect.ValueOf((*_github_com_goravel_framework_contracts_database_orm_ConnectionModel)(nil)),
		"_Cursor":           reflect.ValueOf((*_github_com_goravel_framework_contracts_database_orm_Cursor)(nil)),
		"_DispatchesEvents": reflect.ValueOf((*_github_com_goravel_framework_contracts_database_orm_DispatchesEvents)(nil)),
		"_Event":            reflect.ValueOf((*_github_com_goravel_framework_contracts_database_orm_Event)(nil)),
		"_Factory":          reflect.ValueOf((*_github_com_goravel_framework_contracts_database_orm_Factory)(nil)),
		"_Observer":         reflect.ValueOf((*_github_com_goravel_framework_contracts_database_orm_Observer)(nil)),
		"_Orm":              reflect.ValueOf((*_github_com_goravel_framework_contracts_database_orm_Orm)(nil)),
		"_Query":            reflect.ValueOf((*_github_com_goravel_framework_contracts_database_orm_Query)(nil)),
		"_ToSql":            reflect.ValueOf((*_github_com_goravel_framework_contracts_database_orm_ToSql)(nil)),
		"_Transaction":      reflect.ValueOf((*_github_com_goravel_framework_contracts_database_orm_Transaction)(nil)),
	}
}

// _github_com_goravel_framework_contracts_database_orm_Association is an interface wrapper for Association type
type _github_com_goravel_framework_contracts_database_orm_Association struct {
	IValue   interface{}
	WAppend  func(values ...any) error
	WClear   func() error
	WCount   func() int64
	WDelete  func(values ...any) error
	WFind    func(out any, conds ...any) error
	WReplace func(values ...any) error
}

func (W _github_com_goravel_framework_contracts_database_orm_Association) Append(values ...any) error {
	return W.WAppend(values...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Association) Clear() error {
	return W.WClear()
}
func (W _github_com_goravel_framework_contracts_database_orm_Association) Count() int64 {
	return W.WCount()
}
func (W _github_com_goravel_framework_contracts_database_orm_Association) Delete(values ...any) error {
	return W.WDelete(values...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Association) Find(out any, conds ...any) error {
	return W.WFind(out, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Association) Replace(values ...any) error {
	return W.WReplace(values...)
}

// _github_com_goravel_framework_contracts_database_orm_ConnectionModel is an interface wrapper for ConnectionModel type
type _github_com_goravel_framework_contracts_database_orm_ConnectionModel struct {
	IValue      interface{}
	WConnection func() string
}

func (W _github_com_goravel_framework_contracts_database_orm_ConnectionModel) Connection() string {
	return W.WConnection()
}

// _github_com_goravel_framework_contracts_database_orm_Cursor is an interface wrapper for Cursor type
type _github_com_goravel_framework_contracts_database_orm_Cursor struct {
	IValue interface{}
	WScan  func(value any) error
}

func (W _github_com_goravel_framework_contracts_database_orm_Cursor) Scan(value any) error {
	return W.WScan(value)
}

// _github_com_goravel_framework_contracts_database_orm_DispatchesEvents is an interface wrapper for DispatchesEvents type
type _github_com_goravel_framework_contracts_database_orm_DispatchesEvents struct {
	IValue            interface{}
	WDispatchesEvents func() map[orm.EventType]func(orm.Event) error
}

func (W _github_com_goravel_framework_contracts_database_orm_DispatchesEvents) DispatchesEvents() map[orm.EventType]func(orm.Event) error {
	return W.WDispatchesEvents()
}

// _github_com_goravel_framework_contracts_database_orm_Event is an interface wrapper for Event type
type _github_com_goravel_framework_contracts_database_orm_Event struct {
	IValue        interface{}
	WContext      func() context.Context
	WGetAttribute func(key string) any
	WGetOriginal  func(key string, def ...any) any
	WIsClean      func(columns ...string) bool
	WIsDirty      func(columns ...string) bool
	WQuery        func() orm.Query
	WSetAttribute func(key string, value any)
}

func (W _github_com_goravel_framework_contracts_database_orm_Event) Context() context.Context {
	return W.WContext()
}
func (W _github_com_goravel_framework_contracts_database_orm_Event) GetAttribute(key string) any {
	return W.WGetAttribute(key)
}
func (W _github_com_goravel_framework_contracts_database_orm_Event) GetOriginal(key string, def ...any) any {
	return W.WGetOriginal(key, def...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Event) IsClean(columns ...string) bool {
	return W.WIsClean(columns...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Event) IsDirty(columns ...string) bool {
	return W.WIsDirty(columns...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Event) Query() orm.Query {
	return W.WQuery()
}
func (W _github_com_goravel_framework_contracts_database_orm_Event) SetAttribute(key string, value any) {
	W.WSetAttribute(key, value)
}

// _github_com_goravel_framework_contracts_database_orm_Factory is an interface wrapper for Factory type
type _github_com_goravel_framework_contracts_database_orm_Factory struct {
	IValue         interface{}
	WCount         func(count int) orm.Factory
	WCreate        func(value any, attributes ...map[string]any) error
	WCreateQuietly func(value any, attributes ...map[string]any) error
	WMake          func(value any, attributes ...map[string]any) error
}

func (W _github_com_goravel_framework_contracts_database_orm_Factory) Count(count int) orm.Factory {
	return W.WCount(count)
}
func (W _github_com_goravel_framework_contracts_database_orm_Factory) Create(value any, attributes ...map[string]any) error {
	return W.WCreate(value, attributes...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Factory) CreateQuietly(value any, attributes ...map[string]any) error {
	return W.WCreateQuietly(value, attributes...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Factory) Make(value any, attributes ...map[string]any) error {
	return W.WMake(value, attributes...)
}

// _github_com_goravel_framework_contracts_database_orm_Observer is an interface wrapper for Observer type
type _github_com_goravel_framework_contracts_database_orm_Observer struct {
	IValue         interface{}
	WCreated       func(a0 orm.Event) error
	WCreating      func(a0 orm.Event) error
	WDeleted       func(a0 orm.Event) error
	WDeleting      func(a0 orm.Event) error
	WForceDeleted  func(a0 orm.Event) error
	WForceDeleting func(a0 orm.Event) error
	WRetrieved     func(a0 orm.Event) error
	WSaved         func(a0 orm.Event) error
	WSaving        func(a0 orm.Event) error
	WUpdated       func(a0 orm.Event) error
	WUpdating      func(a0 orm.Event) error
}

func (W _github_com_goravel_framework_contracts_database_orm_Observer) Created(a0 orm.Event) error {
	return W.WCreated(a0)
}
func (W _github_com_goravel_framework_contracts_database_orm_Observer) Creating(a0 orm.Event) error {
	return W.WCreating(a0)
}
func (W _github_com_goravel_framework_contracts_database_orm_Observer) Deleted(a0 orm.Event) error {
	return W.WDeleted(a0)
}
func (W _github_com_goravel_framework_contracts_database_orm_Observer) Deleting(a0 orm.Event) error {
	return W.WDeleting(a0)
}
func (W _github_com_goravel_framework_contracts_database_orm_Observer) ForceDeleted(a0 orm.Event) error {
	return W.WForceDeleted(a0)
}
func (W _github_com_goravel_framework_contracts_database_orm_Observer) ForceDeleting(a0 orm.Event) error {
	return W.WForceDeleting(a0)
}
func (W _github_com_goravel_framework_contracts_database_orm_Observer) Retrieved(a0 orm.Event) error {
	return W.WRetrieved(a0)
}
func (W _github_com_goravel_framework_contracts_database_orm_Observer) Saved(a0 orm.Event) error {
	return W.WSaved(a0)
}
func (W _github_com_goravel_framework_contracts_database_orm_Observer) Saving(a0 orm.Event) error {
	return W.WSaving(a0)
}
func (W _github_com_goravel_framework_contracts_database_orm_Observer) Updated(a0 orm.Event) error {
	return W.WUpdated(a0)
}
func (W _github_com_goravel_framework_contracts_database_orm_Observer) Updating(a0 orm.Event) error {
	return W.WUpdating(a0)
}

// _github_com_goravel_framework_contracts_database_orm_Orm is an interface wrapper for Orm type
type _github_com_goravel_framework_contracts_database_orm_Orm struct {
	IValue       interface{}
	WConnection  func(name string) orm.Orm
	WDB          func() (*sql.DB, error)
	WFactory     func() orm.Factory
	WObserve     func(model any, observer orm.Observer)
	WQuery       func() orm.Query
	WTransaction func(txFunc func(tx orm.Transaction) error) error
	WWithContext func(ctx context.Context) orm.Orm
}

func (W _github_com_goravel_framework_contracts_database_orm_Orm) Connection(name string) orm.Orm {
	return W.WConnection(name)
}
func (W _github_com_goravel_framework_contracts_database_orm_Orm) DB() (*sql.DB, error) {
	return W.WDB()
}
func (W _github_com_goravel_framework_contracts_database_orm_Orm) Factory() orm.Factory {
	return W.WFactory()
}
func (W _github_com_goravel_framework_contracts_database_orm_Orm) Observe(model any, observer orm.Observer) {
	W.WObserve(model, observer)
}
func (W _github_com_goravel_framework_contracts_database_orm_Orm) Query() orm.Query {
	return W.WQuery()
}
func (W _github_com_goravel_framework_contracts_database_orm_Orm) Transaction(txFunc func(tx orm.Transaction) error) error {
	return W.WTransaction(txFunc)
}
func (W _github_com_goravel_framework_contracts_database_orm_Orm) WithContext(ctx context.Context) orm.Orm {
	return W.WWithContext(ctx)
}

// _github_com_goravel_framework_contracts_database_orm_Query is an interface wrapper for Query type
type _github_com_goravel_framework_contracts_database_orm_Query struct {
	IValue             interface{}
	WAssociation       func(association string) orm.Association
	WBegin             func() (orm.Transaction, error)
	WCount             func(count *int64) error
	WCreate            func(value any) error
	WCursor            func() (chan orm.Cursor, error)
	WDelete            func(value any, conds ...any) (*orm.Result, error)
	WDistinct          func(args ...any) orm.Query
	WDriver            func() orm.Driver
	WExec              func(sql string, values ...any) (*orm.Result, error)
	WExists            func(exists *bool) error
	WFind              func(dest any, conds ...any) error
	WFindOrFail        func(dest any, conds ...any) error
	WFirst             func(dest any) error
	WFirstOr           func(dest any, callback func() error) error
	WFirstOrCreate     func(dest any, conds ...any) error
	WFirstOrFail       func(dest any) error
	WFirstOrNew        func(dest any, attributes any, values ...any) error
	WForceDelete       func(value any, conds ...any) (*orm.Result, error)
	WGet               func(dest any) error
	WGroup             func(name string) orm.Query
	WHaving            func(query any, args ...any) orm.Query
	WInRandomOrder     func() orm.Query
	WJoin              func(query string, args ...any) orm.Query
	WLimit             func(limit int) orm.Query
	WLoad              func(dest any, relation string, args ...any) error
	WLoadMissing       func(dest any, relation string, args ...any) error
	WLockForUpdate     func() orm.Query
	WModel             func(value any) orm.Query
	WOffset            func(offset int) orm.Query
	WOmit              func(columns ...string) orm.Query
	WOrWhere           func(query any, args ...any) orm.Query
	WOrWhereBetween    func(column string, x any, y any) orm.Query
	WOrWhereIn         func(column string, values []any) orm.Query
	WOrWhereNotBetween func(column string, x any, y any) orm.Query
	WOrWhereNotIn      func(column string, values []any) orm.Query
	WOrWhereNull       func(column string) orm.Query
	WOrder             func(value any) orm.Query
	WOrderBy           func(column string, direction ...string) orm.Query
	WOrderByDesc       func(column string) orm.Query
	WPaginate          func(page int, limit int, dest any, total *int64) error
	WPluck             func(column string, dest any) error
	WRaw               func(sql string, values ...any) orm.Query
	WSave              func(value any) error
	WSaveQuietly       func(value any) error
	WScan              func(dest any) error
	WScopes            func(funcs ...func(orm.Query) orm.Query) orm.Query
	WSelect            func(query any, args ...any) orm.Query
	WSharedLock        func() orm.Query
	WSum               func(column string, dest any) error
	WTable             func(name string, args ...any) orm.Query
	WToRawSql          func() orm.ToSql
	WToSql             func() orm.ToSql
	WUpdate            func(column any, value ...any) (*orm.Result, error)
	WUpdateOrCreate    func(dest any, attributes any, values any) error
	WWhere             func(query any, args ...any) orm.Query
	WWhereBetween      func(column string, x any, y any) orm.Query
	WWhereIn           func(column string, values []any) orm.Query
	WWhereNotBetween   func(column string, x any, y any) orm.Query
	WWhereNotIn        func(column string, values []any) orm.Query
	WWhereNotNull      func(column string) orm.Query
	WWhereNull         func(column string) orm.Query
	WWith              func(query string, args ...any) orm.Query
	WWithTrashed       func() orm.Query
	WWithoutEvents     func() orm.Query
}

func (W _github_com_goravel_framework_contracts_database_orm_Query) Association(association string) orm.Association {
	return W.WAssociation(association)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Begin() (orm.Transaction, error) {
	return W.WBegin()
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Count(count *int64) error {
	return W.WCount(count)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Create(value any) error {
	return W.WCreate(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Cursor() (chan orm.Cursor, error) {
	return W.WCursor()
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Delete(value any, conds ...any) (*orm.Result, error) {
	return W.WDelete(value, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Distinct(args ...any) orm.Query {
	return W.WDistinct(args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Driver() orm.Driver {
	return W.WDriver()
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Exec(sql string, values ...any) (*orm.Result, error) {
	return W.WExec(sql, values...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Exists(exists *bool) error {
	return W.WExists(exists)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Find(dest any, conds ...any) error {
	return W.WFind(dest, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) FindOrFail(dest any, conds ...any) error {
	return W.WFindOrFail(dest, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) First(dest any) error {
	return W.WFirst(dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) FirstOr(dest any, callback func() error) error {
	return W.WFirstOr(dest, callback)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) FirstOrCreate(dest any, conds ...any) error {
	return W.WFirstOrCreate(dest, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) FirstOrFail(dest any) error {
	return W.WFirstOrFail(dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) FirstOrNew(dest any, attributes any, values ...any) error {
	return W.WFirstOrNew(dest, attributes, values...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) ForceDelete(value any, conds ...any) (*orm.Result, error) {
	return W.WForceDelete(value, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Get(dest any) error {
	return W.WGet(dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Group(name string) orm.Query {
	return W.WGroup(name)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Having(query any, args ...any) orm.Query {
	return W.WHaving(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) InRandomOrder() orm.Query {
	return W.WInRandomOrder()
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Join(query string, args ...any) orm.Query {
	return W.WJoin(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Limit(limit int) orm.Query {
	return W.WLimit(limit)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Load(dest any, relation string, args ...any) error {
	return W.WLoad(dest, relation, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) LoadMissing(dest any, relation string, args ...any) error {
	return W.WLoadMissing(dest, relation, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) LockForUpdate() orm.Query {
	return W.WLockForUpdate()
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Model(value any) orm.Query {
	return W.WModel(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Offset(offset int) orm.Query {
	return W.WOffset(offset)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Omit(columns ...string) orm.Query {
	return W.WOmit(columns...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) OrWhere(query any, args ...any) orm.Query {
	return W.WOrWhere(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) OrWhereBetween(column string, x any, y any) orm.Query {
	return W.WOrWhereBetween(column, x, y)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) OrWhereIn(column string, values []any) orm.Query {
	return W.WOrWhereIn(column, values)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) OrWhereNotBetween(column string, x any, y any) orm.Query {
	return W.WOrWhereNotBetween(column, x, y)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) OrWhereNotIn(column string, values []any) orm.Query {
	return W.WOrWhereNotIn(column, values)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) OrWhereNull(column string) orm.Query {
	return W.WOrWhereNull(column)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Order(value any) orm.Query {
	return W.WOrder(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) OrderBy(column string, direction ...string) orm.Query {
	return W.WOrderBy(column, direction...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) OrderByDesc(column string) orm.Query {
	return W.WOrderByDesc(column)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Paginate(page int, limit int, dest any, total *int64) error {
	return W.WPaginate(page, limit, dest, total)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Pluck(column string, dest any) error {
	return W.WPluck(column, dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Raw(sql string, values ...any) orm.Query {
	return W.WRaw(sql, values...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Save(value any) error {
	return W.WSave(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) SaveQuietly(value any) error {
	return W.WSaveQuietly(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Scan(dest any) error {
	return W.WScan(dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Scopes(funcs ...func(orm.Query) orm.Query) orm.Query {
	return W.WScopes(funcs...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Select(query any, args ...any) orm.Query {
	return W.WSelect(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) SharedLock() orm.Query {
	return W.WSharedLock()
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Sum(column string, dest any) error {
	return W.WSum(column, dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Table(name string, args ...any) orm.Query {
	return W.WTable(name, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) ToRawSql() orm.ToSql {
	return W.WToRawSql()
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) ToSql() orm.ToSql {
	return W.WToSql()
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Update(column any, value ...any) (*orm.Result, error) {
	return W.WUpdate(column, value...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) UpdateOrCreate(dest any, attributes any, values any) error {
	return W.WUpdateOrCreate(dest, attributes, values)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) Where(query any, args ...any) orm.Query {
	return W.WWhere(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) WhereBetween(column string, x any, y any) orm.Query {
	return W.WWhereBetween(column, x, y)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) WhereIn(column string, values []any) orm.Query {
	return W.WWhereIn(column, values)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) WhereNotBetween(column string, x any, y any) orm.Query {
	return W.WWhereNotBetween(column, x, y)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) WhereNotIn(column string, values []any) orm.Query {
	return W.WWhereNotIn(column, values)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) WhereNotNull(column string) orm.Query {
	return W.WWhereNotNull(column)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) WhereNull(column string) orm.Query {
	return W.WWhereNull(column)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) With(query string, args ...any) orm.Query {
	return W.WWith(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) WithTrashed() orm.Query {
	return W.WWithTrashed()
}
func (W _github_com_goravel_framework_contracts_database_orm_Query) WithoutEvents() orm.Query {
	return W.WWithoutEvents()
}

// _github_com_goravel_framework_contracts_database_orm_ToSql is an interface wrapper for ToSql type
type _github_com_goravel_framework_contracts_database_orm_ToSql struct {
	IValue  interface{}
	WCount  func() string
	WCreate func(value any) string
	WDelete func(value any, conds ...any) string
	WFind   func(dest any, conds ...any) string
	WFirst  func(dest any) string
	WGet    func(dest any) string
	WPluck  func(column string, dest any) string
	WSave   func(value any) string
	WSum    func(column string, dest any) string
	WUpdate func(column any, value ...any) string
}

func (W _github_com_goravel_framework_contracts_database_orm_ToSql) Count() string {
	return W.WCount()
}
func (W _github_com_goravel_framework_contracts_database_orm_ToSql) Create(value any) string {
	return W.WCreate(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_ToSql) Delete(value any, conds ...any) string {
	return W.WDelete(value, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_ToSql) Find(dest any, conds ...any) string {
	return W.WFind(dest, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_ToSql) First(dest any) string {
	return W.WFirst(dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_ToSql) Get(dest any) string {
	return W.WGet(dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_ToSql) Pluck(column string, dest any) string {
	return W.WPluck(column, dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_ToSql) Save(value any) string {
	return W.WSave(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_ToSql) Sum(column string, dest any) string {
	return W.WSum(column, dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_ToSql) Update(column any, value ...any) string {
	return W.WUpdate(column, value...)
}

// _github_com_goravel_framework_contracts_database_orm_Transaction is an interface wrapper for Transaction type
type _github_com_goravel_framework_contracts_database_orm_Transaction struct {
	IValue             interface{}
	WAssociation       func(association string) orm.Association
	WBegin             func() (orm.Transaction, error)
	WCommit            func() error
	WCount             func(count *int64) error
	WCreate            func(value any) error
	WCursor            func() (chan orm.Cursor, error)
	WDelete            func(value any, conds ...any) (*orm.Result, error)
	WDistinct          func(args ...any) orm.Query
	WDriver            func() orm.Driver
	WExec              func(sql string, values ...any) (*orm.Result, error)
	WExists            func(exists *bool) error
	WFind              func(dest any, conds ...any) error
	WFindOrFail        func(dest any, conds ...any) error
	WFirst             func(dest any) error
	WFirstOr           func(dest any, callback func() error) error
	WFirstOrCreate     func(dest any, conds ...any) error
	WFirstOrFail       func(dest any) error
	WFirstOrNew        func(dest any, attributes any, values ...any) error
	WForceDelete       func(value any, conds ...any) (*orm.Result, error)
	WGet               func(dest any) error
	WGroup             func(name string) orm.Query
	WHaving            func(query any, args ...any) orm.Query
	WInRandomOrder     func() orm.Query
	WJoin              func(query string, args ...any) orm.Query
	WLimit             func(limit int) orm.Query
	WLoad              func(dest any, relation string, args ...any) error
	WLoadMissing       func(dest any, relation string, args ...any) error
	WLockForUpdate     func() orm.Query
	WModel             func(value any) orm.Query
	WOffset            func(offset int) orm.Query
	WOmit              func(columns ...string) orm.Query
	WOrWhere           func(query any, args ...any) orm.Query
	WOrWhereBetween    func(column string, x any, y any) orm.Query
	WOrWhereIn         func(column string, values []any) orm.Query
	WOrWhereNotBetween func(column string, x any, y any) orm.Query
	WOrWhereNotIn      func(column string, values []any) orm.Query
	WOrWhereNull       func(column string) orm.Query
	WOrder             func(value any) orm.Query
	WOrderBy           func(column string, direction ...string) orm.Query
	WOrderByDesc       func(column string) orm.Query
	WPaginate          func(page int, limit int, dest any, total *int64) error
	WPluck             func(column string, dest any) error
	WRaw               func(sql string, values ...any) orm.Query
	WRollback          func() error
	WSave              func(value any) error
	WSaveQuietly       func(value any) error
	WScan              func(dest any) error
	WScopes            func(funcs ...func(orm.Query) orm.Query) orm.Query
	WSelect            func(query any, args ...any) orm.Query
	WSharedLock        func() orm.Query
	WSum               func(column string, dest any) error
	WTable             func(name string, args ...any) orm.Query
	WToRawSql          func() orm.ToSql
	WToSql             func() orm.ToSql
	WUpdate            func(column any, value ...any) (*orm.Result, error)
	WUpdateOrCreate    func(dest any, attributes any, values any) error
	WWhere             func(query any, args ...any) orm.Query
	WWhereBetween      func(column string, x any, y any) orm.Query
	WWhereIn           func(column string, values []any) orm.Query
	WWhereNotBetween   func(column string, x any, y any) orm.Query
	WWhereNotIn        func(column string, values []any) orm.Query
	WWhereNotNull      func(column string) orm.Query
	WWhereNull         func(column string) orm.Query
	WWith              func(query string, args ...any) orm.Query
	WWithTrashed       func() orm.Query
	WWithoutEvents     func() orm.Query
}

func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Association(association string) orm.Association {
	return W.WAssociation(association)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Begin() (orm.Transaction, error) {
	return W.WBegin()
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Commit() error {
	return W.WCommit()
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Count(count *int64) error {
	return W.WCount(count)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Create(value any) error {
	return W.WCreate(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Cursor() (chan orm.Cursor, error) {
	return W.WCursor()
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Delete(value any, conds ...any) (*orm.Result, error) {
	return W.WDelete(value, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Distinct(args ...any) orm.Query {
	return W.WDistinct(args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Driver() orm.Driver {
	return W.WDriver()
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Exec(sql string, values ...any) (*orm.Result, error) {
	return W.WExec(sql, values...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Exists(exists *bool) error {
	return W.WExists(exists)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Find(dest any, conds ...any) error {
	return W.WFind(dest, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) FindOrFail(dest any, conds ...any) error {
	return W.WFindOrFail(dest, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) First(dest any) error {
	return W.WFirst(dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) FirstOr(dest any, callback func() error) error {
	return W.WFirstOr(dest, callback)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) FirstOrCreate(dest any, conds ...any) error {
	return W.WFirstOrCreate(dest, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) FirstOrFail(dest any) error {
	return W.WFirstOrFail(dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) FirstOrNew(dest any, attributes any, values ...any) error {
	return W.WFirstOrNew(dest, attributes, values...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) ForceDelete(value any, conds ...any) (*orm.Result, error) {
	return W.WForceDelete(value, conds...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Get(dest any) error {
	return W.WGet(dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Group(name string) orm.Query {
	return W.WGroup(name)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Having(query any, args ...any) orm.Query {
	return W.WHaving(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) InRandomOrder() orm.Query {
	return W.WInRandomOrder()
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Join(query string, args ...any) orm.Query {
	return W.WJoin(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Limit(limit int) orm.Query {
	return W.WLimit(limit)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Load(dest any, relation string, args ...any) error {
	return W.WLoad(dest, relation, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) LoadMissing(dest any, relation string, args ...any) error {
	return W.WLoadMissing(dest, relation, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) LockForUpdate() orm.Query {
	return W.WLockForUpdate()
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Model(value any) orm.Query {
	return W.WModel(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Offset(offset int) orm.Query {
	return W.WOffset(offset)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Omit(columns ...string) orm.Query {
	return W.WOmit(columns...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) OrWhere(query any, args ...any) orm.Query {
	return W.WOrWhere(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) OrWhereBetween(column string, x any, y any) orm.Query {
	return W.WOrWhereBetween(column, x, y)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) OrWhereIn(column string, values []any) orm.Query {
	return W.WOrWhereIn(column, values)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) OrWhereNotBetween(column string, x any, y any) orm.Query {
	return W.WOrWhereNotBetween(column, x, y)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) OrWhereNotIn(column string, values []any) orm.Query {
	return W.WOrWhereNotIn(column, values)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) OrWhereNull(column string) orm.Query {
	return W.WOrWhereNull(column)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Order(value any) orm.Query {
	return W.WOrder(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) OrderBy(column string, direction ...string) orm.Query {
	return W.WOrderBy(column, direction...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) OrderByDesc(column string) orm.Query {
	return W.WOrderByDesc(column)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Paginate(page int, limit int, dest any, total *int64) error {
	return W.WPaginate(page, limit, dest, total)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Pluck(column string, dest any) error {
	return W.WPluck(column, dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Raw(sql string, values ...any) orm.Query {
	return W.WRaw(sql, values...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Rollback() error {
	return W.WRollback()
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Save(value any) error {
	return W.WSave(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) SaveQuietly(value any) error {
	return W.WSaveQuietly(value)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Scan(dest any) error {
	return W.WScan(dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Scopes(funcs ...func(orm.Query) orm.Query) orm.Query {
	return W.WScopes(funcs...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Select(query any, args ...any) orm.Query {
	return W.WSelect(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) SharedLock() orm.Query {
	return W.WSharedLock()
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Sum(column string, dest any) error {
	return W.WSum(column, dest)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Table(name string, args ...any) orm.Query {
	return W.WTable(name, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) ToRawSql() orm.ToSql {
	return W.WToRawSql()
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) ToSql() orm.ToSql {
	return W.WToSql()
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Update(column any, value ...any) (*orm.Result, error) {
	return W.WUpdate(column, value...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) UpdateOrCreate(dest any, attributes any, values any) error {
	return W.WUpdateOrCreate(dest, attributes, values)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) Where(query any, args ...any) orm.Query {
	return W.WWhere(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) WhereBetween(column string, x any, y any) orm.Query {
	return W.WWhereBetween(column, x, y)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) WhereIn(column string, values []any) orm.Query {
	return W.WWhereIn(column, values)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) WhereNotBetween(column string, x any, y any) orm.Query {
	return W.WWhereNotBetween(column, x, y)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) WhereNotIn(column string, values []any) orm.Query {
	return W.WWhereNotIn(column, values)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) WhereNotNull(column string) orm.Query {
	return W.WWhereNotNull(column)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) WhereNull(column string) orm.Query {
	return W.WWhereNull(column)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) With(query string, args ...any) orm.Query {
	return W.WWith(query, args...)
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) WithTrashed() orm.Query {
	return W.WWithTrashed()
}
func (W _github_com_goravel_framework_contracts_database_orm_Transaction) WithoutEvents() orm.Query {
	return W.WWithoutEvents()
}
